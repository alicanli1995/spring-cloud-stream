/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jsonposfanout.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HadoopRecordLast extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3601473147818911919L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HadoopRecordLast\",\"namespace\":\"com.jsonposfanout.model\",\"fields\":[{\"name\":\"InvoiceNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"CreatedTime\",\"type\":[\"null\",\"long\"]},{\"name\":\"StoreID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"PosID\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"CustomerType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"PaymentMethod\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"DeliveryType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"City\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"State\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"PinCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"ItemCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"ItemDescription\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"ItemPrice\",\"type\":[\"null\",\"double\"]},{\"name\":\"ItemQty\",\"type\":[\"null\",\"int\"]},{\"name\":\"TotalValue\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HadoopRecordLast> ENCODER =
      new BinaryMessageEncoder<HadoopRecordLast>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HadoopRecordLast> DECODER =
      new BinaryMessageDecoder<HadoopRecordLast>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<HadoopRecordLast> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<HadoopRecordLast> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HadoopRecordLast>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this HadoopRecordLast to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a HadoopRecordLast from a ByteBuffer. */
  public static HadoopRecordLast fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String InvoiceNumber;
  @Deprecated public Long CreatedTime;
  @Deprecated public String StoreID;
  @Deprecated public String PosID;
  @Deprecated public String CustomerType;
  @Deprecated public String PaymentMethod;
  @Deprecated public String DeliveryType;
  @Deprecated public String City;
  @Deprecated public String State;
  @Deprecated public String PinCode;
  @Deprecated public String ItemCode;
  @Deprecated public String ItemDescription;
  @Deprecated public Double ItemPrice;
  @Deprecated public Integer ItemQty;
  @Deprecated public Double TotalValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HadoopRecordLast() {}

  /**
   * All-args constructor.
   * @param InvoiceNumber The new value for InvoiceNumber
   * @param CreatedTime The new value for CreatedTime
   * @param StoreID The new value for StoreID
   * @param PosID The new value for PosID
   * @param CustomerType The new value for CustomerType
   * @param PaymentMethod The new value for PaymentMethod
   * @param DeliveryType The new value for DeliveryType
   * @param City The new value for City
   * @param State The new value for State
   * @param PinCode The new value for PinCode
   * @param ItemCode The new value for ItemCode
   * @param ItemDescription The new value for ItemDescription
   * @param ItemPrice The new value for ItemPrice
   * @param ItemQty The new value for ItemQty
   * @param TotalValue The new value for TotalValue
   */
  public HadoopRecordLast(String InvoiceNumber, Long CreatedTime, String StoreID, String PosID, String CustomerType, String PaymentMethod, String DeliveryType, String City, String State, String PinCode, String ItemCode, String ItemDescription, Double ItemPrice, Integer ItemQty, Double TotalValue) {
    this.InvoiceNumber = InvoiceNumber;
    this.CreatedTime = CreatedTime;
    this.StoreID = StoreID;
    this.PosID = PosID;
    this.CustomerType = CustomerType;
    this.PaymentMethod = PaymentMethod;
    this.DeliveryType = DeliveryType;
    this.City = City;
    this.State = State;
    this.PinCode = PinCode;
    this.ItemCode = ItemCode;
    this.ItemDescription = ItemDescription;
    this.ItemPrice = ItemPrice;
    this.ItemQty = ItemQty;
    this.TotalValue = TotalValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return InvoiceNumber;
    case 1: return CreatedTime;
    case 2: return StoreID;
    case 3: return PosID;
    case 4: return CustomerType;
    case 5: return PaymentMethod;
    case 6: return DeliveryType;
    case 7: return City;
    case 8: return State;
    case 9: return PinCode;
    case 10: return ItemCode;
    case 11: return ItemDescription;
    case 12: return ItemPrice;
    case 13: return ItemQty;
    case 14: return TotalValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: InvoiceNumber = (String)value$; break;
    case 1: CreatedTime = (Long)value$; break;
    case 2: StoreID = (String)value$; break;
    case 3: PosID = (String)value$; break;
    case 4: CustomerType = (String)value$; break;
    case 5: PaymentMethod = (String)value$; break;
    case 6: DeliveryType = (String)value$; break;
    case 7: City = (String)value$; break;
    case 8: State = (String)value$; break;
    case 9: PinCode = (String)value$; break;
    case 10: ItemCode = (String)value$; break;
    case 11: ItemDescription = (String)value$; break;
    case 12: ItemPrice = (Double)value$; break;
    case 13: ItemQty = (Integer)value$; break;
    case 14: TotalValue = (Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'InvoiceNumber' field.
   * @return The value of the 'InvoiceNumber' field.
   */
  public String getInvoiceNumber() {
    return InvoiceNumber;
  }

  /**
   * Sets the value of the 'InvoiceNumber' field.
   * @param value the value to set.
   */
  public void setInvoiceNumber(String value) {
    this.InvoiceNumber = value;
  }

  /**
   * Gets the value of the 'CreatedTime' field.
   * @return The value of the 'CreatedTime' field.
   */
  public Long getCreatedTime() {
    return CreatedTime;
  }

  /**
   * Sets the value of the 'CreatedTime' field.
   * @param value the value to set.
   */
  public void setCreatedTime(Long value) {
    this.CreatedTime = value;
  }

  /**
   * Gets the value of the 'StoreID' field.
   * @return The value of the 'StoreID' field.
   */
  public String getStoreID() {
    return StoreID;
  }

  /**
   * Sets the value of the 'StoreID' field.
   * @param value the value to set.
   */
  public void setStoreID(String value) {
    this.StoreID = value;
  }

  /**
   * Gets the value of the 'PosID' field.
   * @return The value of the 'PosID' field.
   */
  public String getPosID() {
    return PosID;
  }

  /**
   * Sets the value of the 'PosID' field.
   * @param value the value to set.
   */
  public void setPosID(String value) {
    this.PosID = value;
  }

  /**
   * Gets the value of the 'CustomerType' field.
   * @return The value of the 'CustomerType' field.
   */
  public String getCustomerType() {
    return CustomerType;
  }

  /**
   * Sets the value of the 'CustomerType' field.
   * @param value the value to set.
   */
  public void setCustomerType(String value) {
    this.CustomerType = value;
  }

  /**
   * Gets the value of the 'PaymentMethod' field.
   * @return The value of the 'PaymentMethod' field.
   */
  public String getPaymentMethod() {
    return PaymentMethod;
  }

  /**
   * Sets the value of the 'PaymentMethod' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(String value) {
    this.PaymentMethod = value;
  }

  /**
   * Gets the value of the 'DeliveryType' field.
   * @return The value of the 'DeliveryType' field.
   */
  public String getDeliveryType() {
    return DeliveryType;
  }

  /**
   * Sets the value of the 'DeliveryType' field.
   * @param value the value to set.
   */
  public void setDeliveryType(String value) {
    this.DeliveryType = value;
  }

  /**
   * Gets the value of the 'City' field.
   * @return The value of the 'City' field.
   */
  public String getCity() {
    return City;
  }

  /**
   * Sets the value of the 'City' field.
   * @param value the value to set.
   */
  public void setCity(String value) {
    this.City = value;
  }

  /**
   * Gets the value of the 'State' field.
   * @return The value of the 'State' field.
   */
  public String getState() {
    return State;
  }

  /**
   * Sets the value of the 'State' field.
   * @param value the value to set.
   */
  public void setState(String value) {
    this.State = value;
  }

  /**
   * Gets the value of the 'PinCode' field.
   * @return The value of the 'PinCode' field.
   */
  public String getPinCode() {
    return PinCode;
  }

  /**
   * Sets the value of the 'PinCode' field.
   * @param value the value to set.
   */
  public void setPinCode(String value) {
    this.PinCode = value;
  }

  /**
   * Gets the value of the 'ItemCode' field.
   * @return The value of the 'ItemCode' field.
   */
  public String getItemCode() {
    return ItemCode;
  }

  /**
   * Sets the value of the 'ItemCode' field.
   * @param value the value to set.
   */
  public void setItemCode(String value) {
    this.ItemCode = value;
  }

  /**
   * Gets the value of the 'ItemDescription' field.
   * @return The value of the 'ItemDescription' field.
   */
  public String getItemDescription() {
    return ItemDescription;
  }

  /**
   * Sets the value of the 'ItemDescription' field.
   * @param value the value to set.
   */
  public void setItemDescription(String value) {
    this.ItemDescription = value;
  }

  /**
   * Gets the value of the 'ItemPrice' field.
   * @return The value of the 'ItemPrice' field.
   */
  public Double getItemPrice() {
    return ItemPrice;
  }

  /**
   * Sets the value of the 'ItemPrice' field.
   * @param value the value to set.
   */
  public void setItemPrice(Double value) {
    this.ItemPrice = value;
  }

  /**
   * Gets the value of the 'ItemQty' field.
   * @return The value of the 'ItemQty' field.
   */
  public Integer getItemQty() {
    return ItemQty;
  }

  /**
   * Sets the value of the 'ItemQty' field.
   * @param value the value to set.
   */
  public void setItemQty(Integer value) {
    this.ItemQty = value;
  }

  /**
   * Gets the value of the 'TotalValue' field.
   * @return The value of the 'TotalValue' field.
   */
  public Double getTotalValue() {
    return TotalValue;
  }

  /**
   * Sets the value of the 'TotalValue' field.
   * @param value the value to set.
   */
  public void setTotalValue(Double value) {
    this.TotalValue = value;
  }

  /**
   * Creates a new HadoopRecordLast RecordBuilder.
   * @return A new HadoopRecordLast RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new HadoopRecordLast RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HadoopRecordLast RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new HadoopRecordLast RecordBuilder by copying an existing HadoopRecordLast instance.
   * @param other The existing instance to copy.
   * @return A new HadoopRecordLast RecordBuilder
   */
  public static Builder newBuilder(HadoopRecordLast other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for HadoopRecordLast instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HadoopRecordLast>
    implements org.apache.avro.data.RecordBuilder<HadoopRecordLast> {

    private String InvoiceNumber;
    private Long CreatedTime;
    private String StoreID;
    private String PosID;
    private String CustomerType;
    private String PaymentMethod;
    private String DeliveryType;
    private String City;
    private String State;
    private String PinCode;
    private String ItemCode;
    private String ItemDescription;
    private Double ItemPrice;
    private Integer ItemQty;
    private Double TotalValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.InvoiceNumber)) {
        this.InvoiceNumber = data().deepCopy(fields()[0].schema(), other.InvoiceNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.StoreID)) {
        this.StoreID = data().deepCopy(fields()[2].schema(), other.StoreID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.PosID)) {
        this.PosID = data().deepCopy(fields()[3].schema(), other.PosID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CustomerType)) {
        this.CustomerType = data().deepCopy(fields()[4].schema(), other.CustomerType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.PaymentMethod)) {
        this.PaymentMethod = data().deepCopy(fields()[5].schema(), other.PaymentMethod);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.DeliveryType)) {
        this.DeliveryType = data().deepCopy(fields()[6].schema(), other.DeliveryType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.City)) {
        this.City = data().deepCopy(fields()[7].schema(), other.City);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.State)) {
        this.State = data().deepCopy(fields()[8].schema(), other.State);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.PinCode)) {
        this.PinCode = data().deepCopy(fields()[9].schema(), other.PinCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ItemCode)) {
        this.ItemCode = data().deepCopy(fields()[10].schema(), other.ItemCode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.ItemDescription)) {
        this.ItemDescription = data().deepCopy(fields()[11].schema(), other.ItemDescription);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.ItemPrice)) {
        this.ItemPrice = data().deepCopy(fields()[12].schema(), other.ItemPrice);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.ItemQty)) {
        this.ItemQty = data().deepCopy(fields()[13].schema(), other.ItemQty);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.TotalValue)) {
        this.TotalValue = data().deepCopy(fields()[14].schema(), other.TotalValue);
        fieldSetFlags()[14] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing HadoopRecordLast instance
     * @param other The existing instance to copy.
     */
    private Builder(HadoopRecordLast other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.InvoiceNumber)) {
        this.InvoiceNumber = data().deepCopy(fields()[0].schema(), other.InvoiceNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.CreatedTime)) {
        this.CreatedTime = data().deepCopy(fields()[1].schema(), other.CreatedTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.StoreID)) {
        this.StoreID = data().deepCopy(fields()[2].schema(), other.StoreID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.PosID)) {
        this.PosID = data().deepCopy(fields()[3].schema(), other.PosID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.CustomerType)) {
        this.CustomerType = data().deepCopy(fields()[4].schema(), other.CustomerType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.PaymentMethod)) {
        this.PaymentMethod = data().deepCopy(fields()[5].schema(), other.PaymentMethod);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.DeliveryType)) {
        this.DeliveryType = data().deepCopy(fields()[6].schema(), other.DeliveryType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.City)) {
        this.City = data().deepCopy(fields()[7].schema(), other.City);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.State)) {
        this.State = data().deepCopy(fields()[8].schema(), other.State);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.PinCode)) {
        this.PinCode = data().deepCopy(fields()[9].schema(), other.PinCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.ItemCode)) {
        this.ItemCode = data().deepCopy(fields()[10].schema(), other.ItemCode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.ItemDescription)) {
        this.ItemDescription = data().deepCopy(fields()[11].schema(), other.ItemDescription);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.ItemPrice)) {
        this.ItemPrice = data().deepCopy(fields()[12].schema(), other.ItemPrice);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.ItemQty)) {
        this.ItemQty = data().deepCopy(fields()[13].schema(), other.ItemQty);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.TotalValue)) {
        this.TotalValue = data().deepCopy(fields()[14].schema(), other.TotalValue);
        fieldSetFlags()[14] = true;
      }
    }

    /**
      * Gets the value of the 'InvoiceNumber' field.
      * @return The value.
      */
    public String getInvoiceNumber() {
      return InvoiceNumber;
    }

    /**
      * Sets the value of the 'InvoiceNumber' field.
      * @param value The value of 'InvoiceNumber'.
      * @return This builder.
      */
    public Builder setInvoiceNumber(String value) {
      validate(fields()[0], value);
      this.InvoiceNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'InvoiceNumber' field has been set.
      * @return True if the 'InvoiceNumber' field has been set, false otherwise.
      */
    public boolean hasInvoiceNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'InvoiceNumber' field.
      * @return This builder.
      */
    public Builder clearInvoiceNumber() {
      InvoiceNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'CreatedTime' field.
      * @return The value.
      */
    public Long getCreatedTime() {
      return CreatedTime;
    }

    /**
      * Sets the value of the 'CreatedTime' field.
      * @param value The value of 'CreatedTime'.
      * @return This builder.
      */
    public Builder setCreatedTime(Long value) {
      validate(fields()[1], value);
      this.CreatedTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'CreatedTime' field has been set.
      * @return True if the 'CreatedTime' field has been set, false otherwise.
      */
    public boolean hasCreatedTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'CreatedTime' field.
      * @return This builder.
      */
    public Builder clearCreatedTime() {
      CreatedTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'StoreID' field.
      * @return The value.
      */
    public String getStoreID() {
      return StoreID;
    }

    /**
      * Sets the value of the 'StoreID' field.
      * @param value The value of 'StoreID'.
      * @return This builder.
      */
    public Builder setStoreID(String value) {
      validate(fields()[2], value);
      this.StoreID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'StoreID' field has been set.
      * @return True if the 'StoreID' field has been set, false otherwise.
      */
    public boolean hasStoreID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'StoreID' field.
      * @return This builder.
      */
    public Builder clearStoreID() {
      StoreID = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'PosID' field.
      * @return The value.
      */
    public String getPosID() {
      return PosID;
    }

    /**
      * Sets the value of the 'PosID' field.
      * @param value The value of 'PosID'.
      * @return This builder.
      */
    public Builder setPosID(String value) {
      validate(fields()[3], value);
      this.PosID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'PosID' field has been set.
      * @return True if the 'PosID' field has been set, false otherwise.
      */
    public boolean hasPosID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'PosID' field.
      * @return This builder.
      */
    public Builder clearPosID() {
      PosID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'CustomerType' field.
      * @return The value.
      */
    public String getCustomerType() {
      return CustomerType;
    }

    /**
      * Sets the value of the 'CustomerType' field.
      * @param value The value of 'CustomerType'.
      * @return This builder.
      */
    public Builder setCustomerType(String value) {
      validate(fields()[4], value);
      this.CustomerType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'CustomerType' field has been set.
      * @return True if the 'CustomerType' field has been set, false otherwise.
      */
    public boolean hasCustomerType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'CustomerType' field.
      * @return This builder.
      */
    public Builder clearCustomerType() {
      CustomerType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'PaymentMethod' field.
      * @return The value.
      */
    public String getPaymentMethod() {
      return PaymentMethod;
    }

    /**
      * Sets the value of the 'PaymentMethod' field.
      * @param value The value of 'PaymentMethod'.
      * @return This builder.
      */
    public Builder setPaymentMethod(String value) {
      validate(fields()[5], value);
      this.PaymentMethod = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'PaymentMethod' field has been set.
      * @return True if the 'PaymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'PaymentMethod' field.
      * @return This builder.
      */
    public Builder clearPaymentMethod() {
      PaymentMethod = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'DeliveryType' field.
      * @return The value.
      */
    public String getDeliveryType() {
      return DeliveryType;
    }

    /**
      * Sets the value of the 'DeliveryType' field.
      * @param value The value of 'DeliveryType'.
      * @return This builder.
      */
    public Builder setDeliveryType(String value) {
      validate(fields()[6], value);
      this.DeliveryType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'DeliveryType' field has been set.
      * @return True if the 'DeliveryType' field has been set, false otherwise.
      */
    public boolean hasDeliveryType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'DeliveryType' field.
      * @return This builder.
      */
    public Builder clearDeliveryType() {
      DeliveryType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'City' field.
      * @return The value.
      */
    public String getCity() {
      return City;
    }

    /**
      * Sets the value of the 'City' field.
      * @param value The value of 'City'.
      * @return This builder.
      */
    public Builder setCity(String value) {
      validate(fields()[7], value);
      this.City = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'City' field has been set.
      * @return True if the 'City' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'City' field.
      * @return This builder.
      */
    public Builder clearCity() {
      City = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'State' field.
      * @return The value.
      */
    public String getState() {
      return State;
    }

    /**
      * Sets the value of the 'State' field.
      * @param value The value of 'State'.
      * @return This builder.
      */
    public Builder setState(String value) {
      validate(fields()[8], value);
      this.State = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'State' field has been set.
      * @return True if the 'State' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'State' field.
      * @return This builder.
      */
    public Builder clearState() {
      State = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'PinCode' field.
      * @return The value.
      */
    public String getPinCode() {
      return PinCode;
    }

    /**
      * Sets the value of the 'PinCode' field.
      * @param value The value of 'PinCode'.
      * @return This builder.
      */
    public Builder setPinCode(String value) {
      validate(fields()[9], value);
      this.PinCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'PinCode' field has been set.
      * @return True if the 'PinCode' field has been set, false otherwise.
      */
    public boolean hasPinCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'PinCode' field.
      * @return This builder.
      */
    public Builder clearPinCode() {
      PinCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'ItemCode' field.
      * @return The value.
      */
    public String getItemCode() {
      return ItemCode;
    }

    /**
      * Sets the value of the 'ItemCode' field.
      * @param value The value of 'ItemCode'.
      * @return This builder.
      */
    public Builder setItemCode(String value) {
      validate(fields()[10], value);
      this.ItemCode = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'ItemCode' field has been set.
      * @return True if the 'ItemCode' field has been set, false otherwise.
      */
    public boolean hasItemCode() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'ItemCode' field.
      * @return This builder.
      */
    public Builder clearItemCode() {
      ItemCode = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'ItemDescription' field.
      * @return The value.
      */
    public String getItemDescription() {
      return ItemDescription;
    }

    /**
      * Sets the value of the 'ItemDescription' field.
      * @param value The value of 'ItemDescription'.
      * @return This builder.
      */
    public Builder setItemDescription(String value) {
      validate(fields()[11], value);
      this.ItemDescription = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'ItemDescription' field has been set.
      * @return True if the 'ItemDescription' field has been set, false otherwise.
      */
    public boolean hasItemDescription() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'ItemDescription' field.
      * @return This builder.
      */
    public Builder clearItemDescription() {
      ItemDescription = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'ItemPrice' field.
      * @return The value.
      */
    public Double getItemPrice() {
      return ItemPrice;
    }

    /**
      * Sets the value of the 'ItemPrice' field.
      * @param value The value of 'ItemPrice'.
      * @return This builder.
      */
    public Builder setItemPrice(Double value) {
      validate(fields()[12], value);
      this.ItemPrice = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'ItemPrice' field has been set.
      * @return True if the 'ItemPrice' field has been set, false otherwise.
      */
    public boolean hasItemPrice() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'ItemPrice' field.
      * @return This builder.
      */
    public Builder clearItemPrice() {
      ItemPrice = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'ItemQty' field.
      * @return The value.
      */
    public Integer getItemQty() {
      return ItemQty;
    }

    /**
      * Sets the value of the 'ItemQty' field.
      * @param value The value of 'ItemQty'.
      * @return This builder.
      */
    public Builder setItemQty(Integer value) {
      validate(fields()[13], value);
      this.ItemQty = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'ItemQty' field has been set.
      * @return True if the 'ItemQty' field has been set, false otherwise.
      */
    public boolean hasItemQty() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'ItemQty' field.
      * @return This builder.
      */
    public Builder clearItemQty() {
      ItemQty = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'TotalValue' field.
      * @return The value.
      */
    public Double getTotalValue() {
      return TotalValue;
    }

    /**
      * Sets the value of the 'TotalValue' field.
      * @param value The value of 'TotalValue'.
      * @return This builder.
      */
    public Builder setTotalValue(Double value) {
      validate(fields()[14], value);
      this.TotalValue = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'TotalValue' field has been set.
      * @return True if the 'TotalValue' field has been set, false otherwise.
      */
    public boolean hasTotalValue() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'TotalValue' field.
      * @return This builder.
      */
    public Builder clearTotalValue() {
      TotalValue = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HadoopRecordLast build() {
      try {
        HadoopRecordLast record = new HadoopRecordLast();
        record.InvoiceNumber = fieldSetFlags()[0] ? this.InvoiceNumber : (String) defaultValue(fields()[0]);
        record.CreatedTime = fieldSetFlags()[1] ? this.CreatedTime : (Long) defaultValue(fields()[1]);
        record.StoreID = fieldSetFlags()[2] ? this.StoreID : (String) defaultValue(fields()[2]);
        record.PosID = fieldSetFlags()[3] ? this.PosID : (String) defaultValue(fields()[3]);
        record.CustomerType = fieldSetFlags()[4] ? this.CustomerType : (String) defaultValue(fields()[4]);
        record.PaymentMethod = fieldSetFlags()[5] ? this.PaymentMethod : (String) defaultValue(fields()[5]);
        record.DeliveryType = fieldSetFlags()[6] ? this.DeliveryType : (String) defaultValue(fields()[6]);
        record.City = fieldSetFlags()[7] ? this.City : (String) defaultValue(fields()[7]);
        record.State = fieldSetFlags()[8] ? this.State : (String) defaultValue(fields()[8]);
        record.PinCode = fieldSetFlags()[9] ? this.PinCode : (String) defaultValue(fields()[9]);
        record.ItemCode = fieldSetFlags()[10] ? this.ItemCode : (String) defaultValue(fields()[10]);
        record.ItemDescription = fieldSetFlags()[11] ? this.ItemDescription : (String) defaultValue(fields()[11]);
        record.ItemPrice = fieldSetFlags()[12] ? this.ItemPrice : (Double) defaultValue(fields()[12]);
        record.ItemQty = fieldSetFlags()[13] ? this.ItemQty : (Integer) defaultValue(fields()[13]);
        record.TotalValue = fieldSetFlags()[14] ? this.TotalValue : (Double) defaultValue(fields()[14]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HadoopRecordLast>
    WRITER$ = (org.apache.avro.io.DatumWriter<HadoopRecordLast>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HadoopRecordLast>
    READER$ = (org.apache.avro.io.DatumReader<HadoopRecordLast>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
